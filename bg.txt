#include<mpi.h>
#include<stdio.h>
#include<stdlib.h>

int main(int argc, char** argv[])
{
    MPI_Init(NULL,NULL);

    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD,&world_rank);

    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD,&world_size);

    
    int Tri_h,Tri_a,Tri_b,Tri_base,Tri_area,Tri_peri;
    int Cyl_h,Cyl_r,Cyl_area,Cyl_peri;
    int Cir_r,Cir_area,Cir_peri;
    const float pie = 3.14;

 

    if (world_rank == 0){
        printf("Enter the height of triangle : ");
        scanf("%d",&Tri_h);
        printf("Enter the length of base of triangle : ");
        scanf("%d",&Tri_base);

        printf("Enter the length of next side: ");
        scanf("%d",&Tri_a);

        printf("Enter the length of next side : ");
        scanf("%d",&Tri_b);

        printf("Enter the height of cylinder : ");
        scanf("%d",&Cyl_h);

        printf("Enter the radius of cylinder : ");
        scanf("%d",&Cyl_r);

        printf("Enter the radius of circle : ");
        scanf("%d",&Cir_r);


        MPI_Send(&Tri_h, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
        MPI_Send(&Tri_a, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
        MPI_Send(&Tri_b, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
        MPI_Send(&Tri_base, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);

        MPI_Send(&Cyl_h, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
        MPI_Send(&Cyl_r, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);

        MPI_Send(&Cir_r, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);

    }
    else if(world_rank == 1){
        
        MPI_Recv(&Tri_h, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Tri_a, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Tri_b, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Tri_base, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        
        MPI_Recv(&Cyl_h, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Cyl_r, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        MPI_Recv(&Cir_r, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        Tri_area=Tri_h*Tri_base*0.5;
        Tri_peri=Tri_a+Tri_b+Tri_base;
        

        MPI_Send(&Cyl_h, 1, MPI_INT, 2, 1, MPI_COMM_WORLD);
        MPI_Send(&Cyl_r, 1, MPI_INT, 2, 1, MPI_COMM_WORLD);

        MPI_Send(&Cir_r, 1, MPI_INT, 2, 1, MPI_COMM_WORLD);

        MPI_Send(&Tri_area, 1, MPI_INT, 2, 1, MPI_COMM_WORLD);
        MPI_Send(&Tri_peri , 1, MPI_INT, 2, 1, MPI_COMM_WORLD);

    }
    else if(world_rank == 2){

        MPI_Recv(&Cyl_h, 1, MPI_INT, 1, 1, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Cyl_r, 1, MPI_INT, 1, 1, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        MPI_Recv(&Cir_r, 1, MPI_INT, 1, 1, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        MPI_Recv(&Tri_area, 1, MPI_INT, 1, 1, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Tri_peri, 1, MPI_INT, 1, 1, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        Cyl_area=(2*pie*Cyl_r*Cyl_r)+(2*pie*Cyl_r*Cyl_r);
        Cyl_peri=(2*pie*Cyl_r)+(2*pie*Cyl_r*Cyl_h);

        MPI_Send(&Cir_r, 1, MPI_INT, 3, 2, MPI_COMM_WORLD);

        MPI_Send(&Tri_area, 1, MPI_INT, 3, 2, MPI_COMM_WORLD);
        MPI_Send(&Tri_peri, 1, MPI_INT, 3, 2, MPI_COMM_WORLD);

        MPI_Send(&Cyl_area, 1, MPI_INT, 3, 2, MPI_COMM_WORLD);
        MPI_Send(&Cyl_peri, 1, MPI_INT, 3, 2, MPI_COMM_WORLD);

    }

    else if(world_rank == 3){

        MPI_Recv(&Cir_r, 1, MPI_INT, 2, 2, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        MPI_Recv(&Tri_area, 1, MPI_INT, 2, 2, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Tri_peri, 1, MPI_INT, 2, 2, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        MPI_Recv(&Cyl_area, 1, MPI_INT, 2, 2, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Cyl_peri, 1, MPI_INT, 2, 2, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        Cir_area=pie*Cir_r*Cir_r;
        Cir_peri=2*pie*Cir_r*Cir_r;

        MPI_Send(&Tri_area, 1, MPI_INT, 4, 3, MPI_COMM_WORLD);
        MPI_Send(&Tri_peri, 1, MPI_INT, 4, 3, MPI_COMM_WORLD);

        MPI_Send(&Cyl_area, 1, MPI_INT, 4, 3, MPI_COMM_WORLD);
        MPI_Send(&Cyl_peri, 1, MPI_INT, 4, 3, MPI_COMM_WORLD);

        MPI_Send(&Cir_area, 1, MPI_INT, 4, 3, MPI_COMM_WORLD);
        MPI_Send(&Cir_peri, 1, MPI_INT, 4, 3, MPI_COMM_WORLD);


    }

    else if(world_rank == 4){

        MPI_Recv(&Tri_area, 1, MPI_INT, 3, 3, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Tri_peri, 1, MPI_INT, 3, 3, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        MPI_Recv(&Cyl_area, 1, MPI_INT, 3, 3, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Cyl_peri, 1, MPI_INT, 3, 3, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        MPI_Recv(&Cir_area, 1, MPI_INT, 3, 3, MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        MPI_Recv(&Cir_peri, 1, MPI_INT, 3, 3, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

        printf("Area of the Triangle = %d\nPerimeter of the Triangle  = %d\n\n",Tri_area,Tri_peri);
        printf("Area of the Cylinder = %d\nPerimeter of the Cylinder = %d\n\n",Cyl_area,Cyl_peri);
        printf("Area of the Circle = %d\nPerimeter of the Circle = %d\n\n",Cir_area,Cir_peri);
        

    }


    MPI_Finalize();

    return 0;
}